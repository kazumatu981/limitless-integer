// TODO ここにプロンプトの結果を入れる。

// プロンプト例
/*
## 前提

整数をコンピュータで計算する場合、整数には上限が存在する。
これは、計算効率やメモリなどを考慮したため、このような設計になっている。
上限を超えた場合、ゼロに戻ったり、とても小さいマイナスに戻ったりする。
このような現象を桁あふれと呼ぶ。
桁あふれの問題を回避して、概数で計算する機能もある。これのことを浮動小数点という。

## やってほしいこと

桁あふれを気にせずに厳密に計算したいときもある。
桁数を気にしない、整数クラスを設計したいです。
「設計の条件」を満たすTypeScriptのコードを提案してください。

## 設計の条件

* 開発言語はTypeScriptです。
* LimitlessIntegerという名前のクラスです。
* 各桁は `number` の配列で管理し、クラスの `private` なメンバとして管理します。
* 演算はメソッドとして実装します。
* 演算は、足し算、引き算、掛け算ができるようにしてほしいです。
* メソッドの実装は、この後問い合わせるので、現時点では全て `throw new Error('Not Implemented');` してください。
*/
